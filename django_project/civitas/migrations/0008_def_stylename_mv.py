# Generated by Django 2.2.15 on 2023-06-21 12:23

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('civitas', '0007_def_stylename'),
    ]

    sql = """
            CREATE MATERIALIZED VIEW mv_features AS
            SELECT feature_base.id AS id,
                feature_base.description AS description,
                feature_base.display_label AS label,
                feature_base.geom AS geom, 
                feature_base.view_name AS view_name, 
                asset_classification_combination.id AS combination_id,
                asset_classification_combination.def_stylename AS def_stylename,
                (
					CASE
						WHEN reporter_data.pof_id IS NOT NULL THEN
							reporter_data.pof_id
						ELSE
							0
						END
				) AS pof,
                (
					CASE
						WHEN reporter_data.cof_id IS NOT NULL THEN
							reporter_data.cof_id
						ELSE
							0
						END
				) as cof,
                (
					CASE 
						WHEN reporter_data.risk_level IS NOT NULL THEN
							TRIM(reporter_data.risk_level)
						ELSE
							'Unknown'
						END
				) as risk,
                system.id AS system_id,
                system.name AS system_name,
                community.id AS community_id,
                community.name AS community_name,
                region.code AS region_code,
                region.name AS region_name,
                province.code AS province_code,
                province.name AS province_name,
                asset_class.description AS asset_class,
                asset_class.name AS asset_identifier,
                asset_sub_class.name AS asset_sub_class,
                asset_type.name AS type,
                brand.value_text AS brand,
                model.value_text AS model,
                contractor.value_text AS contractor,
                material.value_text AS material,
                diameter.value_text AS diameter,
				(
					CASE
						WHEN feature_geometry.geom_point IS NOT NULL
							THEN 'Point'
						WHEN feature_geometry.geom_line IS NOT NULL
							THEN 'Line'
						WHEN feature_geometry.geom_polygon IS NOT NULL
							THEN 'Polygon'
						ELSE
							'Undefined'
						END
				) as geometry_type,
                length.value_text AS length
                FROM (
                    SELECT feature_base.*,
                    CASE
                        WHEN geom_point IS NOT NULL
                            THEN geom_point
                        ELSE CASE
                            WHEN geom_line IS NOT NULL
                              THEN geom_line
                            ELSE geom_polygon
                            END
                        END
                    AS geom
                    FROM feature_base
                    LEFT JOIN feature_geometry ON feature_base.id = feature_geometry.feature_id
                    WHERE
                    (
                        feature_geometry.geom_point IS NOT NULL OR
                        feature_geometry.geom_line IS NOT NULL OR
                        feature_geometry.geom_polygon IS NOT NULL
                    )
                ) AS feature_base
                LEFT JOIN asset_classification_combination ON
                feature_base.class_id = asset_classification_combination.class_id AND
                feature_base.sub_class_id = asset_classification_combination.sub_class_id AND
                feature_base.type_id = asset_classification_combination.type_id
				LEFT JOIN feature_geometry ON feature_base.id = feature_geometry.feature_id
                LEFT JOIN asset_class ON feature_base.class_id = asset_class.id
                LEFT JOIN asset_sub_class ON feature_base.sub_class_id = asset_sub_class.id
                LEFT JOIN asset_type ON feature_base.type_id = asset_type.id
                LEFT JOIN system ON feature_base.system_id = system.id
                LEFT JOIN community ON system.community_id = community.id
                LEFT JOIN region ON community.region_id = region.id
                LEFT JOIN province ON region.province_id = province.id
				LEFT JOIN reporter_data on reporter_data.feature_id = feature_base.id
                LEFT JOIN (
                    SELECT feature_property.*, property.name as property from feature_property LEFT JOIN property ON feature_property.property_id = property.id
                    WHERE property.name='brand'
                ) AS brand ON feature_base.id = brand.feature_id
                LEFT JOIN (
                    SELECT feature_property.*, property.name as property from feature_property LEFT JOIN property ON feature_property.property_id = property.id
                    WHERE property.name='model'
                ) AS model ON feature_base.id = model.feature_id
                LEFT JOIN (
                    SELECT feature_property.*, property.name as property from feature_property LEFT JOIN property ON feature_property.property_id = property.id
                    WHERE property.name='contractor'
                ) AS contractor ON feature_base.id = contractor.feature_id
                LEFT JOIN (
                    SELECT feature_property.*, property.name as property from feature_property LEFT JOIN property ON feature_property.property_id = property.id
                    WHERE property.name='material'
                ) AS material ON feature_base.id = material.feature_id
                LEFT JOIN (
                    SELECT feature_property.*, property.name as property from feature_property LEFT JOIN property ON feature_property.property_id = property.id
                    WHERE property.name='diameter'
                ) AS diameter ON feature_base.id = diameter.feature_id
                LEFT JOIN (
                    SELECT feature_property.*, property.name as property from feature_property LEFT JOIN property ON feature_property.property_id = property.id
                    WHERE property.name='length'
                ) AS length ON feature_base.id = length.feature_id;
        """

    operations = [
        migrations.RunSQL('DROP MATERIALIZED VIEW IF EXISTS mv_features;'),
        migrations.RunSQL(sql)
    ]
